Install Ansible and Ansible Lint

pip3 install ansible==6.4.0 ansible-lint==6.8.1

Create the inventory file
Let’s create the inventory or CMDB file for Ansible using the following command.

cat > inventory.ini <<EOL

# DevSecOps Studio Inventory
[devsecops]
devsecops-box-p9v0d2l8

[prod]
prod-p9v0d2l8

EOL
Next, we will have to ensure the SSH’s yes/no prompt is not shown while running the ansible commands, so we will be using ssh-keyscan to capture the key signatures beforehand.

ssh-keyscan -t rsa prod-p9v0d2l8 >> ~/.ssh/known_hosts

Let’s do this for the rest of the systems in the lab as well.

ssh-keyscan -t rsa devsecops-box-p9v0d2l8 >> ~/.ssh/known_hosts

Run the ansible commands
Let’s run the ansible ad-hoc command to install the ntp service, and check the bash version of all systems.

We can use apt ansible module to install the ntp service on the production machine.

ansible -i inventory.ini prod -m apt -a "name=ntp state=present"


OUTPUT


prod-p9v0d2l8 | CHANGED => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python"
    },
    "cache_update_time": 1599221362,
    "cache_updated": false,
    "changed": true,
    "stderr": "debconf: delaying package configuration, since apt-utils is not installed\n",
    "stderr_lines": [
        "debconf: delaying package configuration, since apt-utils is not installed"
    ],
    "stdout": "Reading package lists...\nBuilding dependency tree...\nReading state information...\nThe following additional packages will be installed:\n  libopts25 netbase sntp tzdata\nSuggested packages:\n  ntp-doc\nThe following NEW packages will be installed:\n  libopts25 netbase ntp sntp tzdata\n0 upgraded, 5 newly installed, 0 to remove and 5 not upgraded.\nNeed to get 987 kB of archives.\nAfter this operation, 5547 kB of additional disk space will be used.\nGet:1 http://archive.ubuntu.com/ubuntu bionic/main amd64 netbase all 5.4 [12.7 kB]\nGet:2 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 tzdata all 2020a-0ubuntu0.18.04 [190 kB]\nGet:3 http://archive.ubuntu.com/ubuntu bionic/universe amd64 libopts25 amd64 1:5.18.12-4 [58.2 kB]\nGet:4 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 ntp amd64 1:4.2.8p10+dfsg-5ubuntu7.2 [640 kB]\nGet:5 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 sntp amd64 1:4.2.8p10+dfsg-5ubuntu7.2 [86.5 kB]\nFetched 987 kB in 1s (1735 kB/s)\nSelecting previously unselected package netbase.\r\n(Reading database ... \r(Reading database ... 5%\r(Reading database ... 10%\r(Reading database ... 15%\r(Reading database ... 20%\r(Reading database ... 25%\r(Reading database ... 30%\r(Reading database ... 35%\r(Reading database ... 40%\r(Reading database ... 45%\r(Reading database ... 50%\r(Reading database ... 55%\r(Reading database ... 60%\r(Reading database ... 65%\r(Reading database ... 70%\r(Reading database ... 75%\r(Reading database ... 80%\r(Reading database ... 85%\r(Reading database ... 90%\r(Reading database ... 95%\r(Reading database ... 100%\r(Reading database ... 10881 files and directories currently installed.)\r\nPreparing to unpack .../archives/netbase_5.4_all.deb ...\r\nUnpacking netbase (5.4) ...\r\nSelecting previously unselected package tzdata.\r\nPreparing to unpack .../tzdata_2020a-0ubuntu0.18.04_all.deb ...\r\nUnpacking tzdata (2020a-0ubuntu0.18.04) ...\r\nSelecting previously unselected package libopts25:amd64.\r\nPreparing to unpack .../libopts25_1%3a5.18.12-4_amd64.deb ...\r\nUnpacking libopts25:amd64 (1:5.18.12-4) ...\r\nSelecting previously unselected package ntp.\r\nPreparing to unpack .../ntp_1%3a4.2.8p10+dfsg-5ubuntu7.2_amd64.deb ...\r\nUnpacking ntp (1:4.2.8p10+dfsg-5ubuntu7.2) ...\r\nSelecting previously unselected package sntp.\r\nPreparing to unpack .../sntp_1%3a4.2.8p10+dfsg-5ubuntu7.2_amd64.deb ...\r\nUnpacking sntp (1:4.2.8p10+dfsg-5ubuntu7.2) ...\r\nSetting up tzdata (2020a-0ubuntu0.18.04) ...\r\n\r\nCurrent default time zone: 'Etc/UTC'\r\nLocal time is now:      Fri Sep  4 12:09:31 UTC 2020.\r\nUniversal Time is now:  Fri Sep  4 12:09:31 UTC 2020.\r\nRun 'dpkg-reconfigure tzdata' if you wish to change it.\r\n\r\nSetting up libopts25:amd64 (1:5.18.12-4) ...\r\nSetting up netbase (5.4) ...\r\nSetting up sntp (1:4.2.8p10+dfsg-5ubuntu7.2) ...\r\nSetting up ntp (1:4.2.8p10+dfsg-5ubuntu7.2) ...\r\ninvoke-rc.d: could not determine current runlevel\r\ninvoke-rc.d: policy-rc.d denied execution of start.\r\nProcessing triggers for libc-bin (2.27-3ubuntu1.2) ...\r\n",

    ...[SNIP]...

        "Setting up libopts25:amd64 (1:5.18.12-4) ...",
        "Setting up netbase (5.4) ...",
        "Setting up sntp (1:4.2.8p10+dfsg-5ubuntu7.2) ...",
        "Setting up ntp (1:4.2.8p10+dfsg-5ubuntu7.2) ...",
        "invoke-rc.d: could not determine current runlevel",
        "invoke-rc.d: policy-rc.d denied execution of start.",
        "Processing triggers for libc-bin (2.27-3ubuntu1.2) ..."
    ]
}
Instead of restricting the commands to the prod machine, let’s find the bash version installed on all the machines in the inventory file.

ansible -i inventory.ini all -m command -a "bash --version"

OUTPUT 


devsecops-box-p9v0d2l8 | CHANGED | rc=0 >>
GNU bash, version 4.4.20(1)-release (x86_64-pc-linux-gnu)
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
prod-p9v0d2l8 | CHANGED | rc=0 >>
GNU bash, version 4.4.20(1)-release (x86_64-pc-linux-gnu)
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Nice, we can see the bash version of the prod and devsecops-box GNU bash, version 4.4.20(1)-release (x86_64-pc-linux-gnu).

Challenges: Ansible Ad-hoc commands
In this exercise, we will use Ansible ad-hoc command to find the uptime of our lab machines.

Note

How is this helpful in real-world situations? We can find uptime of all of your production machine fleet of 500 machines within 5 minutes.

Let’s move to the next step.



Tasks
Use the Ansible command module to find shell module

Hint
ansible-doc -l | grep shell
Use inventory file (-i inventory.ini) and run the uptime command on the production machine using shell module

Hint
ansible -i inventory.ini prod -m shell -a "uptime"


Run the Ansible playbook
Let’s create a playbook to run against the production environment.

cat > playbook.yml <<EOL
---
- name: Example playbook to install firewalld
  hosts: prod
  remote_user: root
  become: yes
  gather_facts: no
  vars:
    state: present

  tasks:
  - name: ensure firewalld is at the latest version
    apt:
      name: firewalld

EOL
Let’s run this playbook against the prod machine.

ansible-playbook -i inventory.ini playbook.yml

PLAY [Example playbook to install firewalld] ******************************************

TASK [ensure firewalld is installed] ***********************************************************************************
ok: [prod-p9v0d2l8]

PLAY RECAP ************************************************************************
prod-p9v0d2l8             : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
Try running the above ansible command once again.

ansible-playbook -i inventory.ini playbook.yml

PLAY [Example playbook to install firewalld] ******************************************

TASK [ensure firewalld is installed] ***********************************************************************************
ok: [prod-p9v0d2l8]

PLAY RECAP ************************************************************************
prod-p9v0d2l8             : ok=1    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
Did you notice the changed=0? What is its importance from a security perspective?




Tasks
Create a new directory /challenge and create a playbook.yml file inside the /challenge directory. You can use the above playbook.yml syntax as a starter for this task, but the /challenge/playbook.yml needs to use the secfigo.terraform role to install the Terraform utility.

Hint
Create the /challenge directory and copy an existing inventory.ini file.

mkdir /challenge && cd /challenge
cp ../inventory.ini .
Create the playbook.yml file with secfigo.terraform role.

cat > /challenge/playbook.yml <<EOL
---
- name: Example playbook to install Terraform using ansible role.
  hosts: prod
  remote_user: root
  become: yes

  roles:
    - secfigo.terraform
EOL

QUESTION
Install secfigo.terraform role using ansible-galaxy.

Hint
ansible-galaxy install secfigo.terraform

QUESTION
Execute the /challenge/playbook.yml against the prod machine to install the Terraform utility. Optionally put this hardening job in the CI pipeline.

Hint
ansible-playbook -i /challenge/inventory.ini /challenge/playbook.yml

Download roles from Ansible Galaxy
Ansible galaxy helps you in storing open source Ansible roles.

Let’s explore the options it provides us.

ansible-galaxy role --help

usage: ansible-galaxy role [-h] ROLE_ACTION ...

positional arguments:
  ROLE_ACTION
    init       Initialize new role with the base structure of a role.
    remove     Delete roles from roles_path.
    delete     Removes the role from Galaxy. It does not remove or alter the
               actual GitHub repository.
    list       Show the name and version of each role installed in the
               roles_path.
    search     Search the Galaxy database by tags, platforms, author and
               multiple keywords.
    import     Import a role
    setup      Manage the integration between Galaxy and the given source.
    login      Login to api.github.com server in order to use ansible-galaxy
               role sub command such as 'import', 'delete', 'publish', and
               'setup'
    info       View more details about a specific role.
    install    Install role(s) from file(s), URL(s) or Ansible Galaxy

optional arguments:
  -h, --help   show this help message and exit
We can search for desired roles using the search option.

ansible-galaxy search terraform

Please press q to get out of the editor.

It’s a long list, but we will choose the secfigo.terraform role from the search results.

ansible-galaxy install secfigo.terraform

- downloading role 'terraform', owned by secfigo
- downloading role from https://github.com/secfigo/ansible-role-terraform/archive/1.0.1.tar.gz
- extracting secfigo.terraform to /root/.ansible/roles/secfigo.terraform
- secfigo.terraform (1.0.1) was installed successfully
Notice, the role was installed under /root/.ansible/roles/secfigo.terraform directory?

Let’s create a directory and playbook to install the terraform on the production machine.

mkdir /challenge && cd /challenge

cp ../inventory.ini .

cat > /challenge/playbook.yml <<EOL
---
- name: Example playbook to install Terraform using ansible role.
  hosts: prod
  remote_user: root
  become: yes

  roles:
    - secfigo.terraform
EOL
Let’s run this playbook against the prod machine to install the Terraform utility.

ansible-playbook -i /challenge/inventory.ini /challenge/playbook.yml

Harden the production environment
Dev-Sec Project has lots of good examples on how to create Ansible roles and uses lots of best practices which we can use as a baseline in our roles.

For example, https://github.com/dev-sec/ansible-os-hardening.

Challenges: Using Ansible to Harden prod server
In this exercise, we will create a new playbook that uses dev-sec.os-hardening role available from Ansible galaxy to harden the prod environment.

Trivia: Which stage should this job run in? and against which machines?

If you are struggling with the exercises, please refer the hints in the lab portal, and the learning resources in the course portal.

Tasks
Create a new directory /hardening and create an ansible-hardening.yml file inside the /hardening directory. The /hardening/ansible-hardening.yml needs to use the dev-sec.os-hardening role to harden a target server.

Hint
Create the /hardening directory and copy an existing inventory.ini file.

mkdir /hardening && cd /hardening
cp ../inventory.ini .

Create the ansible-hardening.yml file with dev-sec.os-hardening role.

cat > /hardening/ansible-hardening.yml <<EOL
---
- name: Playbook to harden Ubuntu OS.
  hosts: prod
  remote_user: root
  become: yes

  roles:
    - dev-sec.os-hardening

EOL

QUESTION
Install dev-sec.os-hardening role from ansible-galaxy

Hint
ansible-galaxy install dev-sec.os-hardening

QUESTION
Execute the /hardening/ansible-hardening.yml to harden the Ubuntu production machine. Optionally put this hardening job in the CI pipeline.

Hint
ansible-playbook -i /hardening/inventory.ini /hardening/ansible-hardening.yml

