In this scenario, you will learn how to use DefectDojo to manage vulnerabilities in a DevSecOps environment.


You will run bandit scan on a repository and then upload the results to DefectDojo.

To achieve the above objectives, you will need to do the following.
1. Clone/download the source code
2. Install bandit tool
3. Run the SAST scan on the source code
4. Upload the result to DefectDojo with custom script


Download the source code
We will do all the exercises locally first in DevSecOps-Box, so let’s start the exercise.

First, we need to download the source code of the project from our git repository.

git clone https://gitlab.practical-devsecops.training/pdso/django.nv webapp

Let’s cd into the application so we can scan the app.

cd webapp

Install Bandit

Let’s install the bandit scanner on the system to perform static analysis.

pip3 install bandit==1.7.1


Run the scanner
As we have learned in the DevSecOps Gospel, we would like to store the tool results in a JSON file. We are using the tee command here to show the output and store it in a file simultaneously.

bandit -r . -f json | tee bandit-output.json

Upload The Results To DefectDojo

Note

Not all security scanners can be integrated and used for uploading the results to DefectDojo.

Please refer to this link to check the available security scanners. (https://www.defectdojo.com/integrations)

We have created a simple upload script for you, and you can download this script using the following command.

curl https://gitlab.practical-devsecops.training/-/snippets/3/raw -o upload-results.py

Let’s explore what options it provides us.

python3 upload-results.py --help

We need to provide the following inputs for this script to work.

Name	Value
HOST	https://dojo-p9v0d2l8.lab.practical-devsecops.training
USERNAME	root
API_KEY	Find it at https://dojo-p9v0d2l8.lab.practical-devsecops.training/api/key-v2
ENGAGEMENT_ID	ID of the engagement, here its 1
PRODUCT_ID	ID of product, here its 1
LEAD_ID	ID of the user conducting the testing
ENVIRONMENT:	Environment name
SCANNER	Name of the scanner, this is case sensitive e.g., ZAP Scan, Bandit Scan, etc
RESULT_FILE	The path to the tool’s output

You need to first log into the dojo website using the following credentials to fetch the API Key.

Machine Details	
Dojo URL	dojo-p9v0d2l8.lab.practical-devsecops.training/api/key-v2
Username	root
Password	pdso-training
You can copy the API_KEY from the DefectDojo app and replace INSERT_API_KEY_HERE with the API_KEY in the below command.

export API_KEY=INSERT_API_KEY_HERE
You can also use the following command to get a token programmatically.

export API_KEY=$(curl -s -XPOST -H 'content-type: application/json' https://dojo-p9v0d2l8.lab.practical-devsecops.training/api/v2/api-token-auth/ -d '{"username": "root", "password": "pdso-training"}' | jq -r '.token' )

Note

Make sure the API_KEY shows an output when executing echo $API_KEY command. If not, you need to wait until the DefectDojo is ready.

We can now upload the bandit’s scan output (bandit-output.json) to DefectDojo.

If you encounter a 500 error code, please verify whether your environment has been configured correctly or not.

You can inspect the specific variable in Engagements > Environments.

Visit the https://dojo-p9v0d2l8.lab.practical-devsecops.training/engagement/1 to see the uploaded issues.

python3 upload-results.py --host dojo-p9v0d2l8.lab.practical-devsecops.training --api_key $API_KEY --engagement_id 1 --product_id 1 --lead_id 1 --environment "Production" --result_file bandit-output.json --scanner "Bandit Scan"

Challenge: Upload ZAP results to DefectDojo manually
In this exercise, you will use the upload-results.py script to upload the ZAP Scan results to the DefectDojo.

To solve this challenge, please do the following:
- Explore the different features Dojo provides while keeping a note of URL changes in the address bar of your browser.
- At least visit the product page, engagement page and the test options in the Dojo portal
- The 500 error while uploading ZAP’s output is because of the wrong arguments used.

QUESTION 
Scan the production machine https://prod-p9v0d2l8.lab.practical-devsecops.training with the help of the ZAP docker image owasp/zap2docker-stable:2.10.0, and save the results to /webapp/zap-output.xml

ANSWER
Refer to the exercise How to Embed Zed Attack Proxy (ZAP) into GitLab, with output set to xml format -d -x zap-output.xml

docker run --user $(id -u):$(id -g) -w /zap -v $(pwd):/zap/wrk:rw \
           --rm owasp/zap2docker-stable:2.10.0 zap-baseline.py \
           -t https://prod-p9v0d2l8.lab.practical-devsecops.training \
           -d -x zap-output.xml

QUESTION 
Upload the ZAP scan results to Defect Dojo

ANSWER 

python3 upload-results.py --host dojo-p9v0d2l8.lab.practical-devsecops.training \
    --api_key $API_KEY --engagement_id 1 --product_id 1 \
    --lead_id 1 --environment "Production" \
    --result_file /webapp/zap-output.xml \
    --scanner "ZAP Scan"
