Create a new projects by visiting https://gitlab-ce-p9v0d2l8.lab.practical-devsecops.training/projects/new#blank_project, give the project name terraform and url user root. Next, click Create project button. Once done we need to push our source code into GitLab, letâ€™s download the code using git clone in DevSecOps Box.

git clone https://gitlab.practical-devsecops.training/pdso/terraform.git terraform

cd terraform

Rename git url to the new one.

git remote rename origin old-origin

git remote add origin git@gitlab-ce-p9v0d2l8:root/terraform.git

Then, push the code into the repository.

git push -u origin --all

And enter the GitLab credentials.



image: docker:20.10  # To run all jobs in this pipeline, use a latest docker image

services:
  - docker:dind       # To run all jobs in this pipeline, use a docker image which contains a docker daemon running inside (dind - docker in docker). Reference: https://forum.gitlab.com/t/why-services-docker-dind-is-needed-while-already-having-image-docker/43534

stages:
  - validate
  - build
  - test
  - release
  - preprod
  - integration
  - prod

terrascan:
  stage: validate
  image:
    name: accurics/terrascan:latest
    entrypoint: ["/bin/sh", "-c"]
  script:
    - /go/bin/terrascan scan . -o json > terrascan-output.json
  artifacts:
    paths: [terrascan-output.json]
    when: always
  allow_failure: true

test:
  stage: test
  script:
    - echo "This is a test step"

integration:
  stage: integration
  script:
    - echo "This is an integration step"
    - exit 1
  allow_failure: true # Even if the job fails, continue to the next stages

prod:
  stage: prod
  script:
    - echo "This is a deploy step."
  when: manual # Continuous Delivery
