
Install Ansible and Ansible Lint
Ansible uses simple English like language to automate configurations, settings, and deployments in traditional and cloud environments. It’s easy to learn and can be understood by even non-technical folks.

Source: Ansible official website.

This exercise uses two machines, the DevSecOps Box with hostname as devsecops-box-p9v0d2l8, and a production machine, prod-p9v0d2l8.

We will do all the exercises locally first in DevSecOps-Box, so let’s start the activity.

First, we need to install the ansible and ansible-lint programs.

pip3 install ansible==6.4.0 ansible-lint==6.8.1

Create the inventory file
Let’s create the inventory or CMDB file for Ansible using the following command.

cat > inventory.ini <<EOL

# DevSecOps Studio Inventory
[devsecops]
devsecops-box-p9v0d2l8

[prod]
prod-p9v0d2l8

EOL
Next, we will have to ensure the SSH’s yes/no prompt is not shown while running the ansible commands, so we will be using ssh-keyscan to capture the key signatures beforehand.

ssh-keyscan -t rsa prod-p9v0d2l8 >> ~/.ssh/known_hosts

# prod-p9v0d2l8:22 SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5
Let’s do this for the rest of the systems in the lab as well.

ssh-keyscan -t rsa devsecops-box-p9v0d2l8 >> ~/.ssh/known_hosts

# devsecops-box-p9v0d2l8:22 SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5
ProTip

Instead of running the ssh-keyscan command twice, we can achieve the same using the below command.

ssh-keyscan -t rsa prod-p9v0d2l8 devsecops-box-p9v0d2l8 >> ~/.ssh/known_hosts


Run the ansible commands
Let’s run the ansible ad-hoc command to install the ntp service, and check the bash version of all systems.

We can use apt ansible module to install the ntp service on the production machine.

ansible -i inventory.ini prod -m apt -a "name=ntp state=present"

prod-p9v0d2l8 | CHANGED => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python"
    },
    "cache_update_time": 1599221362,
    "cache_updated": false,
    "changed": true,
    "stderr": "debconf: delaying package configuration, since apt-utils is not installed\n",
    "stderr_lines": [
        "debconf: delaying package configuration, since apt-utils is not installed"
    ],
    "stdout": "Reading package lists...\nBuilding dependency tree...\nReading state information...\nThe following additional packages will be installed:\n  libopts25 netbase sntp tzdata\nSuggested packages:\n  ntp-doc\nThe following NEW packages will be installed:\n  libopts25 netbase ntp sntp tzdata\n0 upgraded, 5 newly installed, 0 to remove and 5 not upgraded.\nNeed to get 987 kB of archives.\nAfter this operation, 5547 kB of additional disk space will be used.\nGet:1 http://archive.ubuntu.com/ubuntu bionic/main amd64 netbase all 5.4 [12.7 kB]\nGet:2 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 tzdata all 2020a-0ubuntu0.18.04 [190 kB]\nGet:3 http://archive.ubuntu.com/ubuntu bionic/universe amd64 libopts25 amd64 1:5.18.12-4 [58.2 kB]\nGet:4 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 ntp amd64 1:4.2.8p10+dfsg-5ubuntu7.2 [640 kB]\nGet:5 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 sntp amd64 1:4.2.8p10+dfsg-5ubuntu7.2 [86.5 kB]\nFetched 987 kB in 1s (1735 kB/s)\nSelecting previously unselected package netbase.\r\n(Reading database ... \r(Reading database ... 5%\r(Reading database ... 10%\r(Reading database ... 15%\r(Reading database ... 20%\r(Reading database ... 25%\r(Reading database ... 30%\r(Reading database ... 35%\r(Reading database ... 40%\r(Reading database ... 45%\r(Reading database ... 50%\r(Reading database ... 55%\r(Reading database ... 60%\r(Reading database ... 65%\r(Reading database ... 70%\r(Reading database ... 75%\r(Reading database ... 80%\r(Reading database ... 85%\r(Reading database ... 90%\r(Reading database ... 95%\r(Reading database ... 100%\r(Reading database ... 10881 files and directories currently installed.)\r\nPreparing to unpack .../archives/netbase_5.4_all.deb ...\r\nUnpacking netbase (5.4) ...\r\nSelecting previously unselected package tzdata.\r\nPreparing to unpack .../tzdata_2020a-0ubuntu0.18.04_all.deb ...\r\nUnpacking tzdata (2020a-0ubuntu0.18.04) ...\r\nSelecting previously unselected package libopts25:amd64.\r\nPreparing to unpack .../libopts25_1%3a5.18.12-4_amd64.deb ...\r\nUnpacking libopts25:amd64 (1:5.18.12-4) ...\r\nSelecting previously unselected package ntp.\r\nPreparing to unpack .../ntp_1%3a4.2.8p10+dfsg-5ubuntu7.2_amd64.deb ...\r\nUnpacking ntp (1:4.2.8p10+dfsg-5ubuntu7.2) ...\r\nSelecting previously unselected package sntp.\r\nPreparing to unpack .../sntp_1%3a4.2.8p10+dfsg-5ubuntu7.2_amd64.deb ...\r\nUnpacking sntp (1:4.2.8p10+dfsg-5ubuntu7.2) ...\r\nSetting up tzdata (2020a-0ubuntu0.18.04) ...\r\n\r\nCurrent default time zone: 'Etc/UTC'\r\nLocal time is now:      Fri Sep  4 12:09:31 UTC 2020.\r\nUniversal Time is now:  Fri Sep  4 12:09:31 UTC 2020.\r\nRun 'dpkg-reconfigure tzdata' if you wish to change it.\r\n\r\nSetting up libopts25:amd64 (1:5.18.12-4) ...\r\nSetting up netbase (5.4) ...\r\nSetting up sntp (1:4.2.8p10+dfsg-5ubuntu7.2) ...\r\nSetting up ntp (1:4.2.8p10+dfsg-5ubuntu7.2) ...\r\ninvoke-rc.d: could not determine current runlevel\r\ninvoke-rc.d: policy-rc.d denied execution of start.\r\nProcessing triggers for libc-bin (2.27-3ubuntu1.2) ...\r\n",

    ...[SNIP]...

        "Setting up libopts25:amd64 (1:5.18.12-4) ...",
        "Setting up netbase (5.4) ...",
        "Setting up sntp (1:4.2.8p10+dfsg-5ubuntu7.2) ...",
        "Setting up ntp (1:4.2.8p10+dfsg-5ubuntu7.2) ...",
        "invoke-rc.d: could not determine current runlevel",
        "invoke-rc.d: policy-rc.d denied execution of start.",
        "Processing triggers for libc-bin (2.27-3ubuntu1.2) ..."
    ]
}
Instead of restricting the commands to the prod machine, let’s find the bash version installed on all the machines in the inventory file.

ansible -i inventory.ini all -m command -a "bash --version"

devsecops-box-p9v0d2l8 | CHANGED | rc=0 >>
GNU bash, version 4.4.20(1)-release (x86_64-pc-linux-gnu)
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
prod-p9v0d2l8 | CHANGED | rc=0 >>
GNU bash, version 4.4.20(1)-release (x86_64-pc-linux-gnu)
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Nice, we can see the bash version of the prod and devsecops-box GNU bash, version 4.4.20(1)-release (x86_64-pc-linux-gnu).
