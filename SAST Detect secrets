We will do all the exercises locally first in DevSecOps-Box, so let’s start the exercise.

First, we need to download the source code of the project from our git repository.

git clone https://gitlab.practical-devsecops.training/pdso/django.nv webapp

Let’s cd into the application so we can scan the app.

cd webapp

Let’s install the detect-secrets tool on the system to scan for the secrets in our code.

pip3 install detect-secrets==1.4.0


Let’s explore what options detect-secrets provides us.

detect-secrets --help

As we have learned in the DevSecOps Gospel, we should save the output in the machine-readable format. JSON, CSV, XML formats can be parsed by the machines easily.

Let’s run the detect-secrets command with the scan argument to find any secrets in our code.

detect-secrets scan

It seems detect-secrets‘s default output format is JSON format. Let’s store the output/results in a file.

detect-secrets scan > secrets-output.json

We can also mark the issues/findings as false-positives in the output file using the audit command. You can accept an issue as a real issue with the letter y for yes and n for no.

Go ahead and mark the issues appropriately.

echo "q\n" | detect-secrets audit secrets-output.json

The echo “q\n” above is just STDIN to automatically quit or exit from the detect-secrets itself.
